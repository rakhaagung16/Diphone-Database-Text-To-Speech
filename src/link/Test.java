/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package link;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileView;

/**
 *
 * @author Rakha Agung trimanda
 */
public class Test extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    
    public static File f;
    
    public Test() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Upload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(325, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(266, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            ChooseFile();
        } catch (IOException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Test().setVisible(true);
            }
        });
    }

    class AnOvalIcon implements Icon {
        Color color;

        public AnOvalIcon(Color c) {
          color = c;
        }

        public void paintIcon(Component c, Graphics g, int x, int y) {
          g.setColor(color);
          g.fillOval(x, y, getIconWidth(), getIconHeight());
        }

        public int getIconWidth() {
          return 10;
        }

        public int getIconHeight() {
          return 15;
        }
      }

      public class IconView extends FileView {
        private HashMap hash = new HashMap();

        public IconView() {
          hash.put("htm", new AnOvalIcon(Color.RED));
          hash.put("html", new AnOvalIcon(Color.GREEN));
          hash.put("java", new AnOvalIcon(Color.BLUE));
        }

        public String getName(File f) {
          String s = f.getName();
          if (s.length() == 0) {
            s = f.getAbsolutePath();
          }
          return s;
        }

        public String getDescription(File f) {
          return f.getName();
        }

        public String getTypeDescription(File f) {
          return f.getAbsolutePath();
        }

        public Icon getIcon(File f) {
          String path = f.getAbsolutePath();
          int pos = path.lastIndexOf('.');
          if ((pos >= 0) && (pos < (path.length() - 1))) {
            String ext = path.substring(pos + 1).toLowerCase();
            return (Icon) hash.get(ext);
          }
          return null;
        }

        public Boolean isTraversable(File file) {
          return (new Boolean(file.isDirectory()));
        }
      }

      public class ExtensionFilter extends FileFilter {
        private String extensions[];

        private String description;

        public ExtensionFilter(String description, String extension) {
          this(description, new String[] { extension });
        }

        public ExtensionFilter(String description, String extensions[]) {
          this.description = description;
          this.extensions = (String[]) extensions.clone();
        }

        public boolean accept(File file) {
          if (file.isDirectory()) {
            return true;
          }
          int count = extensions.length;
          String path = file.getAbsolutePath();
          for (int i = 0; i < count; i++) {
            String ext = extensions[i];
            if (path.endsWith(ext)
                && (path.charAt(path.length() - ext.length()) == '.')) {
              return true;
            }
          }
          return false;
        }

        public String getDescription() {
          return (description == null ? extensions[0] : description);
        }
      }

    public void ChooseFile() throws FileNotFoundException, IOException {
            JFileChooser chooser = new JFileChooser(".");
            FileFilter type1 = new ExtensionFilter("Java Files", ".java");

            FileFilter type2 = new ExtensionFilter("Document Files", new String [] {".docx", ".pdf", ".txt"});
            
            FileFilter type3 = new ExtensionFilter("HTML Files", new String[] { ".htm", ".html" });

            chooser.addChoosableFileFilter(type1);
            chooser.addChoosableFileFilter(type2);
            chooser.addChoosableFileFilter(type3);

            FileView view = new IconView();
            chooser.setFileView(view);
            int status = chooser.showOpenDialog(Test.this);
            if (status == JFileChooser.APPROVE_OPTION) {
              f = chooser.getSelectedFile();
              String name = f.getName();
//              if(name.endsWith(".txt")){
//                  System.out.println("Salah!");
//              }
              System.out.println(f);
            }
            
            FileReader fr = new FileReader(f);
          BufferedReader br = new BufferedReader(fr);
          
          ArrayList<String> kms = new ArrayList<>();
            int x = 0;
            String hm;

            while ((hm = br.readLine())!= null) {                    
                kms.add(hm);
                x++;
            }
            String a="";
            for(String b: kms){
                a += b+"\t";
                
            }
            System.out.println(""+a);
            
          
      }
      
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
